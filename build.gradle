// stealing some gradle from railways
// thanks grimm and tal
// and me too a little

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "fabric-loom" version "1.0-SNAPSHOT"
    id "io.github.juuxel.loom-quiltflower" version "1.+"
}

group = 'com.kotakotik'
String versionEnv = System.getenv("GEARS_VERSION")
version = "${mc_version}-${version}"
if(versionEnv != null) {
    version ="${mc_version}_${versionEnv}"
}
archivesBaseName = 'creategears'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}


shadowJar {
    archiveBaseName.set("gears")
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.kotakotik.creategears.repack.registrate'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'remapJar'
}

artifacts {
    archives remapJar
}

build.dependsOn remapJar
build.dependsOn shadowJar
jar.dependsOn shadowJar

repositories {
    mavenLocal()
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // Registrate, Flywheel
        url "https://maven.tterrag.com"
    }

    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://jitpack.io" }
    maven { url = "https://mvn.devos.one/snapshots/" }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "com.mojang:minecraft:${project.mc_version}"
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.mc_version}-stable")

    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${forge_config_version}"))
    modImplementation("com.electronwill.night-config:core:${project.night_config_core_version}")
    modImplementation("com.electronwill.night-config:toml:${project.night_config_toml_version}")
    modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }

    // insert outdated forge documentation here

    // JEI
    modCompileOnlyApi("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${mc_version}-fabric:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${mc_version}-fabric:${jei_version}")

    modImplementation("com.simibubi.create:create-fabric-${mc_version}:${create_version}") { transitive = false } // Create
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${mc_version}:${project.flywheel_version}")

//    implementation fg.deobf("curse.maven:cogwheel-tweaker-465296:${cogwheeltweaker_file}")
//    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${crafttweaker_version}")
//    implementation fg.deobf("curse.maven:cnt-237065:${contenttweaker_file}")
//    runtimeOnly fg.deobf("curse.maven:openloader-354339:${openloader_file}")

    modImplementation("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "creategears",
                "Specification-Vendor"    : "kotakotik22",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "kotakotik22",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "creategears.mixins.json"
        ])
    }
}

jar.finalizedBy('remapJar')